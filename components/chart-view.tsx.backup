"use client"

import { useEffect, useRef, useState } from 'react';
import * as d3 from 'd3';

interface ChartViewProps {
  data?: any;
}

interface EventData {
  id: number;
  event_type: string;
  priority_level: number;
  event_status: string;
  date_start: string;
  date_end: string | null;
  route: string;
  county: string;
  city: string;
}

interface ChartData {
  name: string;
  value: number;
}

export function ChartView({ data }: ChartViewProps) {
  const [hasData, setHasData] = useState<boolean>(false);
  const [events, setEvents] = useState<EventData[]>([]);
  const [eventsByType, setEventsByType] = useState<ChartData[]>([]);
  const [eventsByStatus, setEventsByStatus] = useState<ChartData[]>([]);
  const [eventsByRoute, setEventsByRoute] = useState<ChartData[]>([]);
  const [eventsByDay, setEventsByDay] = useState<{date: string; count: number}[]>([]);
  
  const pieChartRef = useRef<SVGSVGElement | null>(null);
  const barChartRef = useRef<SVGSVGElement | null>(null);
  const routeChartRef = useRef<SVGSVGElement | null>(null);
  const timelineRef = useRef<SVGSVGElement | null>(null);

  // Process data when it changes
  useEffect(() => {
    if (data && data.results) {
      // Extract traffic events from the data
      let allEvents: EventData[] = [];
      
      data.results.forEach((result: any) => {
        if (result.traffic_events && Array.isArray(result.traffic_events)) {
          allEvents = [...allEvents, ...result.traffic_events];
        }
      });
      
      if (allEvents.length > 0) {
        setHasData(true);
        setEvents(allEvents);
        
        // Process data for charts
        processEventData(allEvents);
      } else {
        setHasData(false);
      }
    } else {
      setHasData(false);
    }
  }, [data]);

  // Process event data for different charts
  const processEventData = (events: EventData[]) => {
    // Count events by type
    const typeCount = events.reduce((acc: {[key: string]: number}, event) => {
      const type = event.event_type || 'Unknown';
      acc[type] = (acc[type] || 0) + 1;
      return acc;
    }, {});
    
    // Count events by status
    const statusCount = events.reduce((acc: {[key: string]: number}, event) => {
      const status = event.event_status || 'Unknown';
      acc[status] = (acc[status] || 0) + 1;
      return acc;
    }, {});
    
    // Count events by route (top 10)
    const routeCount = events.reduce((acc: {[key: string]: number}, event) => {
      const route = event.route || 'Unknown';
      acc[route] = (acc[route] || 0) + 1;
      return acc;
    }, {});
    
    // Count events by day
    const dayCount = events.reduce((acc: {[key: string]: number}, event) => {
      if (event.date_start) {
        const date = event.date_start.split('T')[0];
        acc[date] = (acc[date] || 0) + 1;
      }
      return acc;
    }, {});
    
    // Convert to array format for D3
    const typeData = Object.entries(typeCount).map(([name, value]) => ({ name, value }));
    const statusData = Object.entries(statusCount).map(([name, value]) => ({ name, value }));
    
    // Sort route data by count and take top 10
    const routeData = Object.entries(routeCount)
      .map(([name, value]) => ({ name, value }))
      .sort((a, b) => b.value - a.value)
      .slice(0, 10);
      
    // Sort day data chronologically
    const dayData = Object.entries(dayCount)
      .map(([date, count]) => ({ date, count }))
      .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());
    
    setEventsByType(typeData);
    setEventsByStatus(statusData);
    setEventsByRoute(routeData);
    setEventsByDay(dayData);
  };

  // Render pie chart for event types
  useEffect(() => {
    if (eventsByType.length > 0 && pieChartRef.current) {
      const svg = d3.select(pieChartRef.current);
      svg.selectAll('*').remove(); // Clear previous chart
      
      const width = 300;
      const height = 300;
      const radius = Math.min(width, height) / 2;
      
      const color = d3.scaleOrdinal(d3.schemeCategory10);
      
      const pie = d3.pie<ChartData>()
        .value(d => d.value)
        .sort(null);
      
      const arc = d3.arc<d3.PieArcDatum<ChartData>>()
        .innerRadius(0)
        .outerRadius(radius - 10);
      
      const labelArc = d3.arc<d3.PieArcDatum<ChartData>>()
        .innerRadius(radius - 80)
        .outerRadius(radius - 80);
      
      const g = svg.append('g')
        .attr('transform', `translate(${width / 2}, ${height / 2})`);
      
      const arcs = g.selectAll('.arc')
        .data(pie(eventsByType))
        .enter()
        .append('g')
        .attr('class', 'arc');
      
      arcs.append('path')
        .attr('d', arc)
        .attr('fill', (d, i) => color(i.toString()))
        .attr('stroke', 'white')
        .style('stroke-width', '2px');
      
      // Add labels
      arcs.append('text')
        .attr('transform', d => `translate(${labelArc.centroid(d)})`)
        .attr('dy', '.35em')
        .style('text-anchor', 'middle')
        .style('font-size', '12px')
        .style('fill', '#fff')
        .text(d => d.data.value > 5 ? d.data.name : '');
      
      // Add legend
      const legend = svg.append('g')
        .attr('transform', `translate(${width + 20}, 20)`)
        .selectAll('.legend')
        .data(eventsByType)
        .enter()
        .append('g')
        .attr('class', 'legend')
        .attr('transform', (d, i) => `translate(0, ${i * 20})`);
      
      legend.append('rect')
        .attr('width', 18)
        .attr('height', 18)
        .style('fill', (d, i) => color(i.toString()));
      
      legend.append('text')
        .attr('x', 24)
        .attr('y', 9)
        .attr('dy', '.35em')
        .style('font-size', '12px')
        .text(d => `${d.name} (${d.value})`);
    }
  }, [eventsByType]);

  // Render bar chart for event status
  useEffect(() => {
    if (eventsByStatus.length > 0 && barChartRef.current) {
      const svg = d3.select(barChartRef.current);
      svg.selectAll('*').remove(); // Clear previous chart
      
      const margin = { top: 20, right: 30, bottom: 40, left: 60 };
      const width = 400 - margin.left - margin.right;
      const height = 300 - margin.top - margin.bottom;
      
      const x = d3.scaleBand()
        .domain(eventsByStatus.map(d => d.name))
        .range([0, width])
        .padding(0.1);
      
      const y = d3.scaleLinear()
        .domain([0, d3.max(eventsByStatus, d => d.value) || 0])
        .nice()
        .range([height, 0]);
      
      const g = svg.append('g')
        .attr('transform', `translate(${margin.left},${margin.top})`);
      
      // Add x axis
      g.append('g')
        .attr('transform', `translate(0,${height})`)
        .call(d3.axisBottom(x))
        .selectAll('text')
        .style('text-anchor', 'end')
        .attr('dx', '-.8em')
        .attr('dy', '.15em')
        .attr('transform', 'rotate(-45)');
      
      // Add y axis
      g.append('g')
        .call(d3.axisLeft(y));
      
      // Add bars
      g.selectAll('.bar')
        .data(eventsByStatus)
        .enter().append('rect')
        .attr('class', 'bar')
        .attr('x', d => x(d.name) || 0)
        .attr('y', d => y(d.value))
        .attr('width', x.bandwidth())
        .attr('height', d => height - y(d.value))
        .attr('fill', '#4299e1'); // Blue color
      
      // Add labels above bars
      g.selectAll('.label')
        .data(eventsByStatus)
        .enter().append('text')
        .attr('class', 'label')
        .attr('x', d => (x(d.name) || 0) + x.bandwidth() / 2)
        .attr('y', d => y(d.value) - 5)
        .attr('text-anchor', 'middle')
        .text(d => d.value);
    }
  }, [eventsByStatus]);

  // Render horizontal bar chart for routes
  useEffect(() => {
    if (eventsByRoute.length > 0 && routeChartRef.current) {
      const svg = d3.select(routeChartRef.current);
      svg.selectAll('*').remove(); // Clear previous chart
      
      const margin = { top: 20, right: 30, bottom: 40, left: 100 };
      const width = 400 - margin.left - margin.right;
      const height = 300 - margin.top - margin.bottom;
      
      const y = d3.scaleBand()
        .domain(eventsByRoute.map(d => d.name))
        .range([0, height])
        .padding(0.1);
      
      const x = d3.scaleLinear()
        .domain([0, d3.max(eventsByRoute, d => d.value) || 0])
        .nice()
        .range([0, width]);
      
      const g = svg.append('g')
        .attr('transform', `translate(${margin.left},${margin.top})`);
      
      // Add y axis
      g.append('g')
        .call(d3.axisLeft(y));
      
      // Add x axis
      g.append('g')
        .attr('transform', `translate(0,${height})`)
        .call(d3.axisBottom(x));
      
      // Add bars
      g.selectAll('.bar')
        .data(eventsByRoute)
        .enter().append('rect')
        .attr('class', 'bar')
        .attr('y', d => y(d.name) || 0)
        .attr('x', 0)
        .attr('height', y.bandwidth())
        .attr('width', d => x(d.value))
        .attr('fill', '#48bb78'); // Green color
      
      // Add labels
      g.selectAll('.label')
        .data(eventsByRoute)
        .enter().append('text')
        .attr('class', 'label')
        .attr('y', d => (y(d.name) || 0) + y.bandwidth() / 2)
        .attr('x', d => x(d.value) + 5)
        .attr('dy', '.35em')
        .text(d => d.value);
    }
  }, [eventsByRoute]);

  // Render timeline chart
  useEffect(() => {
    if (eventsByDay.length > 0 && timelineRef.current) {
      const svg = d3.select(timelineRef.current);
      svg.selectAll('*').remove(); // Clear previous chart
      
      const margin = { top: 20, right: 30, bottom: 50, left: 60 };
      const width = 800 - margin.left - margin.right;
      const height = 300 - margin.top - margin.bottom;
      
      const x = d3.scaleBand()
        .domain(eventsByDay.map(d => d.date))
        .range([0, width])
        .padding(0.1);
      
      const y = d3.scaleLinear()
        .domain([0, d3.max(eventsByDay, d => d.count) || 0])
        .nice()
        .range([height, 0]);
      
      const g = svg.append('g')
        .attr('transform', `translate(${margin.left},${margin.top})`);
      
      // Add x axis
      g.append('g')
        .attr('transform', `translate(0,${height})`)
        .call(d3.axisBottom(x))
        .selectAll('text')
        .style('text-anchor', 'end')
        .attr('dx', '-.8em')
        .attr('dy', '.15em')
        .attr('transform', 'rotate(-45)');
      
      // Add y axis
      g.append('g')
        .call(d3.axisLeft(y));
      
      // Add area
      const area = d3.area<{date: string; count: number}>()
        .x(d => (x(d.date) || 0) + x.bandwidth() / 2)
        .y0(height)
        .y1(d => y(d.count));
      
      g.append('path')
        .datum(eventsByDay)
        .attr('fill', 'rgba(66, 153, 225, 0.5)')
        .attr('stroke', '#4299e1')
        .attr('stroke-width', 1.5)
        .attr('d', area);
      
      // Add line
      const line = d3.line<{date: string; count: number}>()
        .x(d => (x(d.date) || 0) + x.bandwidth() / 2)
        .y(d => y(d.count));
      
      g.append('path')
        .datum(eventsByDay)
        .attr('fill', 'none')
        .attr('stroke', '#2b6cb0')
        .attr('stroke-width', 2)
        .attr('d', line);
      
      // Add dots
      g.selectAll('.dot')
        .data(eventsByDay)
        .enter().append('circle')
        .attr('class', 'dot')
        .attr('cx', d => (x(d.date) || 0) + x.bandwidth() / 2)
        .attr('cy', d => y(d.count))
        .attr('r', 4)
        .attr('fill', '#2b6cb0');
    }
  }, [eventsByDay]);

  return (
    <div className="h-full w-full flex flex-col p-6 bg-white overflow-y-auto">
      <h2 className="text-2xl font-bold mb-6">Traffic Event Analysis</h2>
      
      {!hasData ? (
        <div className="flex-1 flex items-center justify-center">
          <div className="text-center p-8 bg-gray-50 rounded-lg shadow-sm">
            <h3 className="text-xl font-semibold text-gray-700 mb-2">No Data Available</h3>
            <p className="text-gray-500">Select filters from the left panel to load data.</p>
          </div>
        </div>
      ) : (
        <div className="flex-1 w-full">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
            {/* Event count summary */}
            <div className="bg-blue-50 p-4 rounded-lg shadow-sm">
              <h3 className="text-lg font-semibold mb-2">Event Summary</h3>
              <p className="text-3xl font-bold text-blue-700">{events.length}</p>
              <p className="text-sm text-gray-600">Total Traffic Events</p>
            </div>
            
            {/* Status breakdown */}
            <div className="bg-green-50 p-4 rounded-lg shadow-sm">
              <h3 className="text-lg font-semibold mb-2">Status Breakdown</h3>
              <div className="flex space-x-4">
                <div>
                  <p className="text-2xl font-bold text-green-700">
                    {eventsByStatus.find(s => s.name === "COMPLETED")?.value || 0}
                  </p>
                  <p className="text-sm text-gray-600">Completed</p>
                </div>
                <div>
                  <p className="text-2xl font-bold text-yellow-600">
                    {eventsByStatus.find(s => s.name === "NORMAL")?.value || 0}
                  </p>
                  <p className="text-sm text-gray-600">Active</p>
                </div>
              </div>
            </div>
          </div>
          
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
            {/* Event Types Pie Chart */}
            <div className="bg-white p-4 rounded-lg shadow border">
              <h3 className="text-lg font-semibold mb-4">Events by Type</h3>
              <div className="flex justify-center">
                <svg ref={pieChartRef} width="400" height="300"></svg>
              </div>
            </div>
            
            {/* Event Status Bar Chart */}
            <div className="bg-white p-4 rounded-lg shadow border">
              <h3 className="text-lg font-semibold mb-4">Events by Status</h3>
              <div className="flex justify-center">
                <svg ref={barChartRef} width="400" height="300"></svg>
              </div>
            </div>
          </div>
          
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
            {/* Top Routes */}
            <div className="bg-white p-4 rounded-lg shadow border">
              <h3 className="text-lg font-semibold mb-4">Top Routes</h3>
              <div className="flex justify-center">
                <svg ref={routeChartRef} width="400" height="300"></svg>
              </div>
            </div>
            
            {/* Event Timeline */}
            <div className="bg-white p-4 rounded-lg shadow border col-span-1 lg:col-span-2">
              <h3 className="text-lg font-semibold mb-4">Event Timeline</h3>
              <div className="flex justify-center overflow-x-auto">
                <svg ref={timelineRef} width="800" height="300"></svg>
              </div>
            </div>
          </div>
        </div>
      )}
      {/* <div className="mt-4 text-gray-500 text-sm">
        <p>This is a placeholder chart view. In the future, this will display real data from your selected filters.</p>
      </div> */}
    </div>
  );
}
