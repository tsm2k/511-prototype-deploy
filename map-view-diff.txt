--- components/map-view.tsx	2025-04-07 20:20:28
+++ temp-map-view.tsx	2025-04-07 20:23:35
@@ -28,13 +28,17 @@
 }
 
 export function MapView({ queryResults }: { queryResults?: any }) {
-  // Function to clear all markers
+  // Function to clear all markers - defined early to avoid reference errors
   const clearMarkers = () => {
-    markersRef.current.forEach(marker => marker.remove());
-    markersRef.current = [];
+    if (markersRef.current) {
+      markersRef.current.forEach(marker => marker.remove());
+      markersRef.current = [];
+    }
     
-    popupsRef.current.forEach(popup => popup.remove());
-    popupsRef.current = [];
+    if (popupsRef.current) {
+      popupsRef.current.forEach(popup => popup.remove());
+      popupsRef.current = [];
+    }
   };
   
   const mapContainer = useRef<HTMLDivElement>(null)
@@ -48,7 +52,6 @@
   const [visibleLayers, setVisibleLayers] = useState<Record<string, boolean>>({})
   const [showLegend, setShowLegend] = useState(true)
 
-
   // Fetch dataset metadata for display names and colors
   useEffect(() => {
     const fetchMetadata = async () => {
@@ -76,7 +79,7 @@
 
   // Initialize map
   useEffect(() => {
-    if (map.current) return
+    if (map.current) return;
 
     if (mapContainer.current) {
       console.log('Initializing map...');
@@ -87,7 +90,7 @@
         style: "mapbox://styles/mapbox/navigation-day-v1",
         center: [-86.1581, 39.7684],
         zoom: 7
-      })
+      });
 
       // Add event listeners to track map loading
       map.current.on('load', () => {
@@ -98,7 +101,7 @@
         console.error('Map error:', e);
       });
 
-      map.current.addControl(new mapboxgl.NavigationControl(), "bottom-right")
+      map.current.addControl(new mapboxgl.NavigationControl(), "bottom-right");
       
       // Create a ResizeObserver to watch for container size changes
       resizeObserverRef.current = new ResizeObserver(() => {
@@ -106,29 +109,30 @@
           // Slight delay to ensure the container has fully resized
           setTimeout(() => {
             if (map.current) {
-              map.current.resize()
+              map.current.resize();
             }
-          }, 0)
+          }, 0);
         }
-      })
+      });
       
       // Start observing the map container
-      resizeObserverRef.current.observe(mapContainer.current)
+      resizeObserverRef.current.observe(mapContainer.current);
     }
 
     return () => {
       // Clean up the observer and map when component unmounts
       if (resizeObserverRef.current && mapContainer.current) {
-        resizeObserverRef.current.unobserve(mapContainer.current)
-        resizeObserverRef.current.disconnect()
+        resizeObserverRef.current.unobserve(mapContainer.current);
+        resizeObserverRef.current.disconnect();
       }
       
       if (map.current) {
-        map.current.remove()
-        map.current = null
+        map.current.remove();
+        map.current = null;
       }
-    }
+    };
   }, []);
+  
   // Process and display map data when queryResults change
   useEffect(() => {
     if (!map.current || !queryResults) {
@@ -149,106 +153,6 @@
       if (resultsObj && typeof resultsObj === 'object') {
         // Process each dataset's results
         Object.entries(resultsObj).forEach(([tableName, items]) => {
-          if (!Array.isArray(items) || !visibleLayers[tableName]) {
-            console.log(`Skipping ${tableName}: Array check: ${Array.isArray(items)}, Visible: ${!!visibleLayers[tableName]}`);
-            return;
-          }
-      
-          console.log(`Processing ${items.length} items from dataset ${tableName}`);
-          
-          // Process each item in the dataset
-          items.forEach((item: any) => {
-            try {
-          // Add the tableName to the item for reference
-          const mapItem: MapData = {
-            ...item,
-            datasource_tablename: tableName
-          };
-          
-          // Parse the readable_coordinates
-          if (mapItem.readable_coordinates) {
-            try {
-              // Try to parse the coordinates
-              let coordinates;
-              
-              // Handle different coordinate formats
-              if (typeof mapItem.readable_coordinates === 'string') {
-                try {
-                  // Try to parse as JSON
-                  coordinates = JSON.parse(mapItem.readable_coordinates);
-                  console.log('Successfully parsed coordinates as JSON:', coordinates);
-                } catch (jsonError) {
-                  // If JSON parsing fails, try to handle as a string format
-                  console.log('Failed to parse as JSON, trying alternative formats');
-                  
-                  // Check if it's a simple coordinate pair like "39.7684,-86.1581"
-                  const coordMatch = mapItem.readable_coordinates.match(/(-?\d+\.\d+),\s*(-?\d+\.\d+)/);
-                  if (coordMatch) {
-                    const lat = parseFloat(coordMatch[1]);
-                    const lng = parseFloat(coordMatch[2]);
-                    coordinates = {
-                      type: 'Point',
-                      coordinates: [lng, lat]
-                    };
-                    console.log('Parsed as simple coordinate pair:', coordinates);
-                  } else {
-                    console.error('Unrecognized coordinate format:', mapItem.readable_coordinates);
-                    continue;
-                  }
-                }
-              } else if (typeof mapItem.readable_coordinates === 'object') {
-                // It's already an object, use it directly
-                coordinates = mapItem.readable_coordinates;
-                console.log('Coordinates already in object format:', coordinates);
-              }
-              
-              // Add marker to map if we have valid coordinates
-              if (coordinates) {
-                addMarkerToMap(mapItem, coordinates);
-              }
-            } catch (parseError) {
-              console.error('Error processing coordinates:', mapItem.readable_coordinates, parseError);
-            }
-          } else {
-            // Check for alternative coordinate fields
-            const possibleCoordinateFields = ['coordinates', 'geometry', 'location', 'position', 'lat_long'];
-            
-            for (const field of possibleCoordinateFields) {
-              if (mapItem[field]) {
-                console.log(`Found alternative coordinate field: ${field}`, mapItem[field]);
-                try {
-                  let coordinates;
-                  if (typeof mapItem[field] === 'string') {
-                    coordinates = JSON.parse(mapItem[field]);
-                  } else {
-                    coordinates = mapItem[field];
-                  }
-                  
-                  addMarkerToMap(mapItem, coordinates);
-                  break; // Exit after successfully using an alternative field
-                } catch (e) {
-                  console.error(`Error using alternative field ${field}:`, e);
-                }
-              }
-            }
-            
-            console.warn('Item missing coordinates:', mapItem);
-          }
-        } catch (error) {
-          console.error('Error processing map item:', error);
-        }
-      });
-    });
-    }
-    // Case 2: Results are in queryResults.results (array format)
-    else if (queryResults.results && Array.isArray(queryResults.results)) {
-      console.log('Processing results from queryResults.results array');
-      
-      // Find the first array element that contains dataset results
-      const resultsObject = queryResults.results.find(item => item && typeof item === 'object');
-      
-      if (resultsObject) {
-        Object.entries(resultsObject).forEach(([tableName, items]) => {
           if (!Array.isArray(items) || !visibleLayers[tableName]) {
             console.log(`Skipping ${tableName}: Array check: ${Array.isArray(items)}, Visible: ${!!visibleLayers[tableName]}`);
             return;
@@ -293,7 +197,7 @@
                         console.log('Parsed as simple coordinate pair:', coordinates);
                       } else {
                         console.error('Unrecognized coordinate format:', mapItem.readable_coordinates);
-                        continue;
+                        return;
                       }
                     }
                   } else if (typeof mapItem.readable_coordinates === 'object') {
@@ -340,87 +244,103 @@
           });
         });
       }
-    }
-    // Case 3: Direct results object
-    else if (typeof queryResults === 'object') {
-      console.log('Processing direct results object');
-      
-      // Try to find any arrays that might contain our data
-      Object.entries(queryResults).forEach(([key, value]) => {
-        if (key === 'results' || !value) return; // Skip if it's the results key we already checked
+    } else if (queryResults.results && typeof queryResults.results === 'object') {
+      // Alternative format: direct object with table names as keys
+      Object.entries(queryResults.results).forEach(([tableName, items]) => {
+        if (!Array.isArray(items) || !visibleLayers[tableName]) {
+          console.log(`Skipping ${tableName}: Array check: ${Array.isArray(items)}, Visible: ${!!visibleLayers[tableName]}`);
+          return;
+        }
         
-        if (typeof value === 'object') {
-          Object.entries(value).forEach(([tableName, items]) => {
-            if (!Array.isArray(items) || !visibleLayers[tableName]) {
-              console.log(`Skipping ${tableName}: Array check: ${Array.isArray(items)}, Visible: ${!!visibleLayers[tableName]}`);
-              return;
-            }
+        console.log(`Processing ${items.length} items from dataset ${tableName}`);
+        
+        // Process each item in the dataset
+        items.forEach((item: any) => {
+          try {
+            // Add the tableName to the item for reference
+            const mapItem: MapData = {
+              ...item,
+              datasource_tablename: tableName
+            };
             
-            console.log(`Processing ${items.length} items from dataset ${tableName}`);
-            
-            // Process each item in the dataset
-            items.forEach((item: any) => {
+            // Parse the readable_coordinates
+            if (mapItem.readable_coordinates) {
               try {
-                // Add the tableName to the item for reference
-                const mapItem: MapData = {
-                  ...item,
-                  datasource_tablename: tableName
-                };
+                // Try to parse the coordinates
+                let coordinates;
                 
-                // Parse the readable_coordinates
-                if (mapItem.readable_coordinates) {
+                // Handle different coordinate formats
+                if (typeof mapItem.readable_coordinates === 'string') {
                   try {
-                    // Try to parse the coordinates
-                    let coordinates;
+                    // Try to parse as JSON
+                    coordinates = JSON.parse(mapItem.readable_coordinates);
+                    console.log('Successfully parsed coordinates as JSON:', coordinates);
+                  } catch (jsonError) {
+                    // If JSON parsing fails, try to handle as a string format
+                    console.log('Failed to parse as JSON, trying alternative formats');
                     
-                    // Handle different coordinate formats
-                    if (typeof mapItem.readable_coordinates === 'string') {
-                      try {
-                        // Try to parse as JSON
-                        coordinates = JSON.parse(mapItem.readable_coordinates);
-                        console.log('Successfully parsed coordinates as JSON:', coordinates);
-                      } catch (jsonError) {
-                        // If JSON parsing fails, try to handle as a string format
-                        console.log('Failed to parse as JSON, trying alternative formats');
-                        
-                        // Check if it's a simple coordinate pair like "39.7684,-86.1581"
-                        const coordMatch = mapItem.readable_coordinates.match(/(-?\d+\.\d+),\s*(-?\d+\.\d+)/);
-                        if (coordMatch) {
-                          const lat = parseFloat(coordMatch[1]);
-                          const lng = parseFloat(coordMatch[2]);
-                          coordinates = {
-                            type: 'Point',
-                            coordinates: [lng, lat]
-                          };
-                          console.log('Parsed as simple coordinate pair:', coordinates);
-                        } else {
-                          console.error('Unrecognized coordinate format:', mapItem.readable_coordinates);
-                          continue;
-                        }
-                      }
-                    } else if (typeof mapItem.readable_coordinates === 'object') {
-                      // It's already an object, use it directly
-                      coordinates = mapItem.readable_coordinates;
-                      console.log('Coordinates already in object format:', coordinates);
+                    // Check if it's a simple coordinate pair like "39.7684,-86.1581"
+                    const coordMatch = mapItem.readable_coordinates.match(/(-?\d+\.\d+),\s*(-?\d+\.\d+)/);
+                    if (coordMatch) {
+                      const lat = parseFloat(coordMatch[1]);
+                      const lng = parseFloat(coordMatch[2]);
+                      coordinates = {
+                        type: 'Point',
+                        coordinates: [lng, lat]
+                      };
+                      console.log('Parsed as simple coordinate pair:', coordinates);
+                    } else {
+                      console.error('Unrecognized coordinate format:', mapItem.readable_coordinates);
+                      continue;
                     }
-                    
-                    // Add marker to map if we have valid coordinates
-                    if (coordinates) {
-                      addMarkerToMap(mapItem, coordinates);
+                  }
+                } else if (typeof mapItem.readable_coordinates === 'object') {
+                  // It's already an object, use it directly
+                  coordinates = mapItem.readable_coordinates;
+                  console.log('Coordinates already in object format:', coordinates);
+                }
+                
+                // Add marker to map if we have valid coordinates
+                if (coordinates) {
+                  addMarkerToMap(mapItem, coordinates);
+                }
+              } catch (parseError) {
+                console.error('Error processing coordinates:', mapItem.readable_coordinates, parseError);
+              }
+            } else {
+              // Check for alternative coordinate fields
+              const possibleCoordinateFields = ['coordinates', 'geometry', 'location', 'position', 'lat_long'];
+              
+              for (const field of possibleCoordinateFields) {
+                if (mapItem[field]) {
+                  console.log(`Found alternative coordinate field: ${field}`, mapItem[field]);
+                  try {
+                    let coordinates;
+                    if (typeof mapItem[field] === 'string') {
+                      coordinates = JSON.parse(mapItem[field]);
+                    } else {
+                      coordinates = mapItem[field];
                     }
-                  } catch (parseError) {
-                    console.error('Error processing coordinates:', mapItem.readable_coordinates, parseError);
+                    
+                    addMarkerToMap(mapItem, coordinates);
+                    break; // Exit after successfully using an alternative field
+                  } catch (e) {
+                    console.error(`Error using alternative field ${field}:`, e);
                   }
-                } else {
-                  console.warn('Item missing readable_coordinates:', mapItem);
                 }
-              } catch (error) {
-                console.error('Error processing map item:', error);
               }
-            });
-          });
-        }
+              
+              if (!mapItem.readable_coordinates && !possibleCoordinateFields.some(field => mapItem[field])) {
+                console.warn('Item missing coordinates:', mapItem);
+              }
+            }
+          } catch (error) {
+            console.error('Error processing map item:', error);
+          }
+        });
       });
+    } else {
+      console.warn('Query results are not in the expected format:', queryResults);
     }
     
     // Fit bounds to markers if we have any
@@ -450,373 +370,297 @@
     // Determine marker position based on geometry type or format
     let position: [number, number];
     
-    // Handle GeoJSON format
-    if (coordinates.type === 'Point') {
-      console.log('Point geometry detected:', coordinates.coordinates);
-      position = coordinates.coordinates as [number, number];
-    } else if (coordinates.type === 'MultiLineString' && coordinates.coordinates?.length > 0) {
-      // For lines, use the first point
-      console.log('MultiLineString geometry detected, using first point:', coordinates.coordinates[0][0]);
-      position = coordinates.coordinates[0][0] as [number, number];
-    } else if (coordinates.type === 'LineString' && coordinates.coordinates?.length > 0) {
-      console.log('LineString geometry detected, using first point:', coordinates.coordinates[0]);
-      position = coordinates.coordinates[0] as [number, number];
-    } 
-    // Handle simple coordinate pairs
-    else if (Array.isArray(coordinates) && coordinates.length === 2 && 
-             typeof coordinates[0] === 'number' && typeof coordinates[1] === 'number') {
-      console.log('Simple coordinate array detected:', coordinates);
-      position = coordinates as [number, number];
-    }
-    // Handle {lat, lng} or {latitude, longitude} format
-    else if (coordinates.lat !== undefined && coordinates.lng !== undefined) {
-      console.log('Lat/lng object format detected:', coordinates);
+    if (coordinates.type === 'Point' && Array.isArray(coordinates.coordinates)) {
+      // GeoJSON Point format
+      position = [coordinates.coordinates[0], coordinates.coordinates[1]];
+    } else if (Array.isArray(coordinates) && coordinates.length === 2) {
+      // Simple array format [lng, lat]
+      position = [coordinates[0], coordinates[1]];
+    } else if (coordinates.lng !== undefined && coordinates.lat !== undefined) {
+      // Object with lng/lat properties
       position = [coordinates.lng, coordinates.lat];
-    }
-    else if (coordinates.latitude !== undefined && coordinates.longitude !== undefined) {
-      console.log('Latitude/longitude object format detected:', coordinates);
+    } else if (coordinates.longitude !== undefined && coordinates.latitude !== undefined) {
+      // Object with longitude/latitude properties
       position = [coordinates.longitude, coordinates.latitude];
-    }
-    // Handle raw coordinates without type
-    else if (coordinates.coordinates && Array.isArray(coordinates.coordinates)) {
-      console.log('Raw coordinates array detected:', coordinates.coordinates);
-      if (coordinates.coordinates.length === 2 && 
-          typeof coordinates.coordinates[0] === 'number' && 
-          typeof coordinates.coordinates[1] === 'number') {
-        position = coordinates.coordinates as [number, number];
-      } else if (coordinates.coordinates.length > 0 && Array.isArray(coordinates.coordinates[0])) {
-        position = coordinates.coordinates[0] as [number, number];
-      } else {
-        console.warn('Unsupported coordinates array format:', coordinates);
-        return;
-      }
     } else {
-      console.warn('Unsupported coordinates format:', coordinates);
+      console.error('Unsupported coordinate format:', coordinates);
       return;
     }
     
-    console.log('Initial position:', position);
+    // Get color based on dataset and event type
+    const color = getDatasetColor(
+      item.datasource_tablename,
+      item.event_type,
+      item.priority_level
+    );
     
-    // Swap coordinates if needed (some GIS systems use [lat, lng] instead of [lng, lat])
-    if (position[0] > 0 && position[0] < 180 && position[1] < -30 && position[1] > -90) {
-      // This looks like [lat, lng] instead of [lng, lat], so swap them
-      console.log('Swapping coordinates from [lat, lng] to [lng, lat]');
-      position = [position[1], position[0]];
-    }
-    
-    console.log('Final position for marker:', position);
-    
-    // Create a custom marker element
+    // Create marker element
     const markerEl = document.createElement('div');
     markerEl.className = 'custom-marker';
-    markerEl.style.width = '24px';
-    markerEl.style.height = '24px';
+    markerEl.style.backgroundColor = color;
+    markerEl.style.width = '20px';
+    markerEl.style.height = '20px';
     markerEl.style.borderRadius = '50%';
     markerEl.style.display = 'flex';
     markerEl.style.alignItems = 'center';
     markerEl.style.justifyContent = 'center';
     
-    // Set color based on dataset, event type, and priority level
-    const datasetColor = getDatasetColor(
-      item.datasource_tablename, 
-      item.event_type, 
-      item.priority_level ? parseInt(item.priority_level.toString()) : undefined
-    );
-    markerEl.style.backgroundColor = datasetColor;
-    markerEl.style.border = '2px solid white';
-    markerEl.style.boxShadow = '0 2px 4px rgba(0,0,0,0.3)';
-    
-    // Add icon based on event type or dataset
+    // Add icon based on event type
     const iconEl = document.createElement('div');
     iconEl.innerHTML = getMarkerIcon(item);
     iconEl.style.color = 'white';
-    iconEl.style.display = 'flex';
-    iconEl.style.alignItems = 'center';
-    iconEl.style.justifyContent = 'center';
+    iconEl.style.fontSize = '12px';
     markerEl.appendChild(iconEl);
     
-    // Create the popup with item details
+    // Create popup with detailed information
     const popup = new mapboxgl.Popup({
       closeButton: true,
       closeOnClick: true,
       maxWidth: '300px'
     }).setHTML(createPopupContent(item));
     
-    popupsRef.current.push(popup);
-    
-    // Create and add the marker
+    // Add marker to map
     const marker = new mapboxgl.Marker(markerEl)
       .setLngLat(position)
-      .setPopup(popup)
-      .addTo(map.current);
+      .setPopup(popup);
     
-    markersRef.current.push(marker);
+    if (map.current) {
+      marker.addTo(map.current);
+      
+      // Store references for later cleanup
+      markersRef.current.push(marker);
+      popupsRef.current.push(popup);
+    }
   };
   
   // Function to get dataset color
   const getDatasetColor = (tableName: string, eventType?: string, priorityLevel?: number): string => {
-    // Color scheme for different datasets (colorblind-friendly)
-    const colorMap: Record<string, string> = {
-      'traffic_events': '#1f77b4', // Blue
-      'tpims_capacity': '#ff7f0e', // Orange
-      'tpims_spaces': '#2ca02c', // Green
-      'default': '#d62728', // Red
+    // Default colors for different datasets
+    const defaultColors: Record<string, string> = {
+      'waze_traffic_data': '#ff7f0e', // Orange
+      'indot_event_data': '#2ca02c', // Green
+      'indot_camera_data': '#1f77b4', // Blue
+      'indot_sensor_data': '#9467bd', // Purple
+      'indot_sign_data': '#8c564b', // Brown
+      'default': '#7f7f7f' // Gray
     };
     
-    // Priority-based colors (overrides other colors if present)
-    if (priorityLevel !== undefined) {
-      switch(priorityLevel) {
-        case 1: return '#ef4444'; // High priority - Red
-        case 2: return '#f59e0b'; // Medium priority - Amber
-        case 3: return '#10b981'; // Low priority - Green
-        default: break; // Fall through to other color logic
-      }
+    // If we have metadata for this dataset, use its color
+    if (datasetMetadata[tableName]?.color) {
+      return datasetMetadata[tableName].color;
     }
     
-    // Event type specific colors
-    const eventTypeColors: Record<string, string> = {
-      'CONSTRUCTION': '#ff7f0e', // Orange
-      'INCIDENT': '#d62728', // Red
-      'CONGESTION': '#9467bd', // Purple
-      'SPECIAL_EVENT': '#8c564b', // Brown
-      'WEATHER': '#e377c2', // Pink
-      'CLOSURE': '#e6550d', // Dark Orange
-      'RESTRICTION': '#fd8d3c', // Light Orange
-      'CRASH': '#d62728', // Red (same as INCIDENT)
-      'ACCIDENT': '#d62728', // Red (same as INCIDENT)
-      'COLLISION': '#d62728', // Red (same as INCIDENT)
-    };
+    // Special case for events - color by event type
+    if (tableName === 'indot_event_data' && eventType) {
+      const eventColors: Record<string, string> = {
+        'CONSTRUCTION': '#ff9900', // Orange
+        'INCIDENT': '#d62728', // Red
+        'CONGESTION': '#9467bd', // Purple
+        'SPECIAL_EVENT': '#2ca02c', // Green
+        'WEATHER_CONDITION': '#1f77b4', // Blue
+        'default': '#7f7f7f' // Gray
+      };
+      
+      const normalizedEventType = eventType.toUpperCase();
+      return eventColors[normalizedEventType] || eventColors.default;
+    }
     
-    // Check if the event type contains any of our known types (case insensitive)
-    if (eventType) {
-      const lowerEventType = eventType.toLowerCase();
-      for (const [key, color] of Object.entries(eventTypeColors)) {
-        if (lowerEventType.includes(key.toLowerCase())) {
-          return color;
-        }
-      }
+    // Color by priority if available
+    if (priorityLevel !== undefined) {
+      const priorityColors = ['#d62728', '#ff7f0e', '#2ca02c', '#1f77b4'];
+      const index = Math.min(priorityLevel, priorityColors.length - 1);
+      return priorityColors[index];
     }
     
-    // If no match found, use dataset color
-    return colorMap[tableName] || colorMap.default;
+    // Fall back to default color for dataset
+    return defaultColors[tableName] || defaultColors.default;
   };
   
   // Function to get marker icon based on item type
   const getMarkerIcon = (item: MapData): string => {
-    // Default icon is a map pin
-    let iconSvg = '<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path><circle cx="12" cy="10" r="3"></circle></svg>';
+    const { datasource_tablename, event_type } = item;
     
-    // Traffic events icons
-    if (item.datasource_tablename === 'traffic_events' && item.event_type) {
-      const eventType = item.event_type.toLowerCase();
+    if (datasource_tablename === 'indot_event_data' && event_type) {
+      const normalizedEventType = event_type.toUpperCase();
       
-      // Construction/work zone
-      if (eventType.includes('construction') || eventType.includes('work') || eventType.includes('maintenance')) {
-        iconSvg = '<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="2" y="6" width="20" height="8" rx="1"></rect><path d="M17 14v7"></path><path d="M7 14v7"></path><path d="M17 3v3"></path><path d="M7 3v3"></path><path d="M10 14 2.3 6.3"></path><path d="m14 6 7.7 7.7"></path><path d="m8 6 8 8"></path></svg>';
+      switch (normalizedEventType) {
+        case 'CONSTRUCTION':
+          return '<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="2" y="6" width="20" height="8" rx="1"></rect><path d="M17 14v7"></path><path d="M7 14v7"></path><path d="M17 3v3"></path><path d="M7 3v3"></path><path d="M10 14 2.3 6.3"></path><path d="m14 6 7.7 7.7"></path><path d="m8 6 8 8"></path></svg>';
+        case 'INCIDENT':
+          return '<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z"></path><path d="M12 9v4"></path><path d="M12 17h.01"></path></svg>';
+        case 'CONGESTION':
+          return '<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><polyline points="12 6 12 12 16 14"></polyline></svg>';
+        default:
+          return '<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>';
       }
-      // Incident/crash/accident
-      else if (eventType.includes('incident') || eventType.includes('crash') || eventType.includes('accident') || eventType.includes('collision')) {
-        iconSvg = '<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z"></path><line x1="12" y1="9" x2="12" y2="13"></line><line x1="12" y1="17" x2="12.01" y2="17"></line></svg>';
-      }
-      // Congestion/delay
-      else if (eventType.includes('congestion') || eventType.includes('delay') || eventType.includes('slow')) {
-        iconSvg = '<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><polyline points="12 6 12 12 16 14"></polyline></svg>';
-      }
-      // Closure/blocked
-      else if (eventType.includes('closure') || eventType.includes('blocked') || eventType.includes('restriction')) {
-        iconSvg = '<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="15" y1="9" x2="9" y2="15"></line><line x1="9" y1="9" x2="15" y2="15"></line></svg>';
-      }
-      // Weather
-      else if (eventType.includes('weather') || eventType.includes('snow') || eventType.includes('rain') || eventType.includes('ice')) {
-        iconSvg = '<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M20 16.2A4.5 4.5 0 0 0 17.5 8h-1.8A7 7 0 1 0 4 14.9"></path><path d="M16 14v6"></path><path d="M8 14v6"></path><path d="M12 16v6"></path></svg>';
-      }
-      // Special event
-      else if (eventType.includes('special') || eventType.includes('event')) {
-        iconSvg = '<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 8a2.83 2.83 0 0 0 4 4 4 4 0 1 1-5.66-5.66A2.83 2.83 0 0 0 12 8z"></path><circle cx="12" cy="12" r="10"></circle></svg>';
-      }
     }
     
-    // TPIMS capacity or spaces icons
-    if (item.datasource_tablename === 'tpims_capacity' || item.datasource_tablename === 'tpims_spaces') {
-      iconSvg = '<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect width="18" height="18" x="3" y="3" rx="2"></rect><path d="M7 10h10"></path><path d="M7 14h10"></path><path d="M9 18V6"></path></svg>';
-    }
-    
-    return iconSvg;
+    // Default icon for other datasets
+    return '<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>';
   };
   
   // Function to create popup content
   const createPopupContent = (item: MapData): string => {
-    // Get dataset display name and color
-    const datasetName = datasetMetadata[item.datasource_tablename]?.datasource_name || item.datasource_tablename;
-    const datasetColor = getDatasetColor(
-      item.datasource_tablename, 
-      item.event_type, 
-      item.priority_level ? parseInt(item.priority_level.toString()) : undefined
-    );
+    const { datasource_tablename } = item;
     
-    // Start with styled header
-    let content = `<div class="p-3">
-      <h3 style="margin-top: 0; margin-bottom: 8px; font-size: 16px; font-weight: 600; color: ${datasetColor};">${datasetName}</h3>
-      <div style="border-bottom: 1px solid #e5e7eb; margin-bottom: 8px;"></div>
-      <div class="space-y-2">`;
+    // Get display name for the dataset
+    const datasetDisplayName = datasetMetadata[datasource_tablename]?.display_name || datasource_tablename;
     
-    // Add event-specific details for traffic events
-    if (item.datasource_tablename === 'traffic_events') {
-      // Format priority if available
-      let priorityText = item.priority_level || 'N/A';
-      if (item.priority_level) {
-        const priority = parseInt(item.priority_level.toString());
-        priorityText = priority === 1 ? 'High' : priority === 2 ? 'Medium' : priority === 3 ? 'Low' : item.priority_level;
-      }
+    // Start with header
+    let content = `
+      <div class="p-2">
+        <div class="font-bold text-lg mb-2">${datasetDisplayName}</div>
+    `;
+    
+    // Add event-specific information
+    if (datasource_tablename === 'indot_event_data') {
+      const eventType = item.event_type || 'Unknown';
+      const eventStatus = item.event_status || 'Unknown';
+      const route = item.route || 'Unknown';
+      const startMM = item.start_mile_marker !== undefined ? item.start_mile_marker : 'Unknown';
+      const endMM = item.end_mile_marker !== undefined ? item.end_mile_marker : 'Unknown';
       
       content += `
-        <div><span style="font-weight: 600;">Event Type:</span> ${item.event_type || 'N/A'}</div>
-        <div><span style="font-weight: 600;">Status:</span> ${item.event_status || 'N/A'}</div>
-        <div><span style="font-weight: 600;">Priority:</span> ${priorityText}</div>
-        <div><span style="font-weight: 600;">Route:</span> ${item.route || 'N/A'}</div>`;
-      
-      // Add lane information if available
-      if (item.lanes_blocked) {
-        content += `<div><span style="font-weight: 600;">Lanes Blocked:</span> ${item.lanes_blocked}</div>`;
-      }
-      
-      if (item.lanes_affected) {
-        content += `<div><span style="font-weight: 600;">Lanes Affected:</span> ${item.lanes_affected}</div>`;
-      }
-      
-      if (item.start_mile_marker) {
-        content += `<div><span style="font-weight: 600;">Mile Marker:</span> ${item.start_mile_marker}${item.end_mile_marker ? ' to ' + item.end_mile_marker : ''}</div>`;
-      }
-      
-      // Handle different date field names that might be present
-      const startDateField = item.date_start || item.start_time || item.start_date;
-      const endDateField = item.date_end || item.end_time || item.end_date;
-      
-      if (startDateField) {
-        try {
-          const startDate = new Date(startDateField);
-          content += `<div><span style="font-weight: 600;">Start Date:</span> ${startDate.toLocaleString()}</div>`;
-        } catch (e) {
-          content += `<div><span style="font-weight: 600;">Start Date:</span> ${startDateField}</div>`;
-        }
-      }
-      
-      if (endDateField) {
-        try {
-          const endDate = new Date(endDateField);
-          content += `<div><span style="font-weight: 600;">End Date:</span> ${endDate.toLocaleString()}</div>`;
-        } catch (e) {
-          content += `<div><span style="font-weight: 600;">End Date:</span> ${endDateField}</div>`;
-        }
-      }
-      
-      // Add description if available
-      if (item.description) {
-        content += `<div style="margin-top: 8px;"><span style="font-weight: 600;">Description:</span><br/>${item.description}</div>`;
-      }
+        <div class="mb-2">
+          <span class="font-semibold">Type:</span> ${eventType}
+        </div>
+        <div class="mb-2">
+          <span class="font-semibold">Status:</span> ${eventStatus}
+        </div>
+        <div class="mb-2">
+          <span class="font-semibold">Route:</span> ${route}
+        </div>
+        <div class="mb-2">
+          <span class="font-semibold">Mile Markers:</span> ${startMM} to ${endMM}
+        </div>
+      `;
     }
     
-    // Add TPIMS-specific details
-    if (item.datasource_tablename === 'tpims_capacity' || item.datasource_tablename === 'tpims_spaces') {
-      // Add relevant TPIMS fields
-      Object.entries(item).forEach(([key, value]) => {
-        // Skip internal fields and coordinates
-        if (['id', 'datasource_metadata_id', 'readable_coordinates', 'datasource_tablename'].includes(key)) return;
+    // Add generic properties (exclude some internal properties)
+    const excludedProps = ['id', 'datasource_metadata_id', 'datasource_tablename', 'event_type', 
+                          'event_status', 'route', 'start_mile_marker', 'end_mile_marker', 
+                          'readable_coordinates', 'coordinates', 'geometry'];
+    
+    content += '<div class="mt-2 border-t pt-2"><span class="font-semibold">Additional Details:</span></div>';
+    
+    for (const [key, value] of Object.entries(item)) {
+      if (!excludedProps.includes(key) && value !== null && value !== undefined) {
+        // Format the value based on its type
+        let formattedValue = value;
         
-        // Format the key for display
-        const displayKey = key.replace(/_/g, ' ').replace(/\b\w/g, c => c.toUpperCase());
+        if (typeof value === 'object') {
+          try {
+            formattedValue = JSON.stringify(value);
+          } catch (e) {
+            formattedValue = '[Complex Object]';
+          }
+        }
         
-        content += `<div><span class="font-semibold">${displayKey}:</span> ${value || 'N/A'}</div>`;
-      });
+        // Format the key for display (convert snake_case to Title Case)
+        const displayKey = key
+          .split('_')
+          .map(word => word.charAt(0).toUpperCase() + word.slice(1))
+          .join(' ');
+        
+        content += `
+          <div class="mb-1">
+            <span class="font-semibold">${displayKey}:</span> ${formattedValue}
+          </div>
+        `;
+      }
     }
     
-    // Close the content div
-    content += `
-      </div>
-    </div>`;
-    
+    content += '</div>';
     return content;
   };
   
   // Toggle layer visibility
   const toggleLayerVisibility = (tableName: string) => {
-    setVisibleLayers(prev => ({
-      ...prev,
-      [tableName]: !prev[tableName]
-    }));
+    setVisibleLayers(prev => {
+      const newVisibility = { ...prev };
+      newVisibility[tableName] = !prev[tableName];
+      return newVisibility;
+    });
   };
   
   return (
     <div className="h-full w-full relative">
       <div ref={mapContainer} className="h-full w-full" />
       
-      {/* Map Legend */}
-      <div className="absolute top-4 right-4 z-10">
-        <Card className="p-3 shadow-lg bg-white/90 backdrop-blur-sm w-64">
-          <div className="flex justify-between items-center mb-2">
-            <h3 className="font-medium text-sm">Map Legend</h3>
-            <Button 
-              variant="ghost" 
-              size="icon" 
-              className="h-6 w-6" 
-              onClick={() => setShowLegend(!showLegend)}
-            >
-              {showLegend ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />}
-            </Button>
-          </div>
-          
-          {showLegend && Object.entries(datasetMetadata).length > 0 && (
+      {/* Legend */}
+      <Card className={`absolute right-4 top-4 p-4 w-64 bg-white/95 shadow-lg transition-all ${showLegend ? 'opacity-100' : 'opacity-0 pointer-events-none'}`}>
+        <div className="flex justify-between items-center mb-2">
+          <h3 className="font-semibold">Map Legend</h3>
+          <Button variant="ghost" size="sm" className="h-6 w-6 p-0" onClick={() => setShowLegend(false)}>
+            <ChevronUp className="h-4 w-4" />
+          </Button>
+        </div>
+        
+        <div className="space-y-4">
+          {/* Dataset visibility toggles */}
+          <div>
+            <h4 className="text-sm font-medium mb-2">Datasets</h4>
             <div className="space-y-2">
               {Object.entries(datasetMetadata).map(([tableName, metadata]) => (
                 <div key={tableName} className="flex items-center space-x-2">
                   <Checkbox 
                     id={`layer-${tableName}`}
-                    checked={visibleLayers[tableName]}
+                    checked={visibleLayers[tableName] || false}
                     onCheckedChange={() => toggleLayerVisibility(tableName)}
                   />
-                  <div 
-                    className="w-4 h-4 rounded-full" 
-                    style={{ backgroundColor: getDatasetColor(tableName) }}
-                  />
-                  <Label 
-                    htmlFor={`layer-${tableName}`}
-                    className="text-sm font-medium"
-                  >
-                    {metadata.datasource_name}
+                  <Label htmlFor={`layer-${tableName}`} className="text-sm cursor-pointer">
+                    {metadata.display_name || tableName}
                   </Label>
                 </div>
               ))}
-              
-              {/* Event type legend for traffic events */}
-              {datasetMetadata['traffic_events'] && visibleLayers['traffic_events'] && (
-                <div className="mt-2 pt-2 border-t">
-                  <h4 className="text-xs font-medium mb-1">Event Types</h4>
-                  <div className="space-y-1">
-                    <div className="flex items-center space-x-2">
-                      <div className="w-4 h-4 rounded-full flex items-center justify-center" style={{ backgroundColor: '#ff7f0e' }}>
-                        <Construction className="h-3 w-3 text-white" />
-                      </div>
-                      <span className="text-xs">Construction</span>
-                    </div>
-                    <div className="flex items-center space-x-2">
-                      <div className="w-4 h-4 rounded-full flex items-center justify-center" style={{ backgroundColor: '#d62728' }}>
-                        <AlertTriangle className="h-3 w-3 text-white" />
-                      </div>
-                      <span className="text-xs">Incident</span>
-                    </div>
-                    <div className="flex items-center space-x-2">
-                      <div className="w-4 h-4 rounded-full flex items-center justify-center" style={{ backgroundColor: '#1f77b4' }}>
-                        <MapIcon className="h-3 w-3 text-white" />
-                      </div>
-                      <span className="text-xs">Other</span>
-                    </div>
-                  </div>
+            </div>
+          </div>
+          
+          {/* Event type colors */}
+          <div>
+            <h4 className="text-sm font-medium mb-2">Event Types</h4>
+            <div className="grid grid-cols-1 gap-2">
+              <div className="flex items-center space-x-2">
+                <div className="w-4 h-4 rounded-full flex items-center justify-center" style={{ backgroundColor: '#ff9900' }}>
+                  <Construction className="h-3 w-3 text-white" />
                 </div>
-              )}
+                <span className="text-xs">Construction</span>
+              </div>
+              <div className="flex items-center space-x-2">
+                <div className="w-4 h-4 rounded-full flex items-center justify-center" style={{ backgroundColor: '#9467bd' }}>
+                  <Clock className="h-3 w-3 text-white" />
+                </div>
+                <span className="text-xs">Congestion</span>
+              </div>
+              <div className="flex items-center space-x-2">
+                <div className="w-4 h-4 rounded-full flex items-center justify-center" style={{ backgroundColor: '#d62728' }}>
+                  <AlertTriangle className="h-3 w-3 text-white" />
+                </div>
+                <span className="text-xs">Incident</span>
+              </div>
+              <div className="flex items-center space-x-2">
+                <div className="w-4 h-4 rounded-full flex items-center justify-center" style={{ backgroundColor: '#1f77b4' }}>
+                  <MapIcon className="h-3 w-3 text-white" />
+                </div>
+                <span className="text-xs">Other</span>
+              </div>
             </div>
-          )}
-        </Card>
-      </div>
+          </div>
+        </div>
+      </Card>
+      
+      {/* Toggle button for legend when hidden */}
+      {!showLegend && (
+        <Button 
+          variant="secondary" 
+          size="sm" 
+          className="absolute right-4 top-4 bg-white/95 shadow-lg"
+          onClick={() => setShowLegend(true)}
+        >
+          <Info className="h-4 w-4 mr-1" />
+          Legend
+        </Button>
+      )}
     </div>
   );
-}
\ No newline at end of file
+}
